#Raspberry Pi

sudo apt-get update && sudo apt-get dist-upgrade -y
sudo rpi-update
sudo rpi-eeprom-update -a

sudo raspi-config (disable uart - enable serial port, enable camera, enable ssh)
ls /dev/ttyAMA0

sudo nano /boot/config.txt
#Go to the bottom line then copy paste, after finish ctrl+X then Yes then hit Enter

[all]
#dtoverlay=vc4-fkms-v3d
dtoverlay=disable-bt
enable_uart=1
start_x=1
gpu_mem=128

#LCD 7 Inch touchscreen waveshare setup
max_usb_current=1
hdmi_group=2
hdmi_mode=87
hdmi_cvt 1024 600 60 6 0 0 0
hdmi_drive=1

#Setup wifi
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
network={
    ssid="testing"
    psk="testingPassword"
}

#Multiple wifi
network={
    ssid="HomeOneSSID"
    psk="passwordOne"
    priority=1
    id_str="homeOne"
}

network={
    ssid="HomeTwoSSID"
    psk="passwordTwo"
    priority=2
    id_str="homeTwo"
}

sudo reboot

###############################################################################################################################

#GIT
sudo apt-get update
sudo apt-get install git

git config --global user.name "Johar Palacita"
git config --global user.email "palacita.concept@gmail.com"

#MAVLProxy(python3)
sudo apt-get install python3-dev python3-opencv python3-wxgtk4.0 python3-pip python3-matplotlib python3-lxml python3-pygame
pip3 install PyYAML mavproxy --user
echo "export PATH=$PATH:$HOME/.local/bin" >> ~/.bashrc
pip3 install mavproxy --user --upgrade
pip3 install mavproxy --user git+https://github.com/ArduPilot/mavproxy.git@master

#MAVLProxy(python2)
sudo apt-get install python-dev python-opencv python-wxgtk4.0 python-pip python-matplotlib python-lxml python-pygame
pip install PyYAML mavproxy --user
echo "export PATH=$PATH:$HOME/.local/bin" >> ~/.bashrc
pip install mavproxy --user --upgrade
pip install mavproxy --user git+https://github.com/ArduPilot/mavproxy.git@master

#MAVProxy (Python 3 on Fedora)
sudo dnf install python3-devel python3-opencv python3-wxpython4 python3-pip python3-matplotlib python3-pygame python3-lxml python3-yaml redhat-rpm-config
pip3 install PyYAML mavproxy --user
echo "export PATH=$PATH:$HOME/.local/bin" >> ~/.bashrc
pip3 install mavproxy --user --upgrade
pip3 install mavproxy --user git+https://github.com/ArduPilot/mavproxy.git@master

#DRONEKIT
sudo pip install future pymavlink MAVProxy python3-future libtool autoconf
#sudo apt install python-future
#sudo apt install python3-future
#sudo apt install libtool
#sudo apt install autoconf
sudo apt-get update && sudo apt-get disk-upgrade -y
#sudo apt-get upgrade
sudo pip install pymavlink mavproxy dronekit dronekit-sitl
#sudo pip install mavproxy
#sudo pip install dronekit
#sudo pip install dronekit-sitl
sudo apt autoremove -y && sudo apt autoclean

sudo apt update
sudo apt install build-essential manpages-dev git
sudo apt-get install python3-dev python3-pip
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10
sudo apt-get install python3-opencv python3-wxgtk4.0 python3-matplotlib python3-lxml python3-pygame
pip3 install PyYAML mavproxy --user
echo "export PATH=$PATH:$HOME/.local/bin" >> ~/.bashrc
cd $courseRoot
mkdir apm
cd apm
git clone -b Copter-4.0.7 https://github.com/ArduPilot/ardupilot

$ pip3 freeze | grep -i mav
MAVProxy==1.8.34
pymavlink==2.4.14

pip3 freeze | grep -i drone
dronekit==2.9.2
dronekit-sitl==3.3.0

ubuntu 20.04
pip3 install pymavlink==2.4.8

mavproxy.py --master=/dev/ttyAMA0
python (filename) --connect /dev/ttyAMA0

#ROS For Raspberry Pi
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu buster main" > /etc/apt/sources.list.d/ros-noetic.list'
cat /etc/apt/sources.list.d/ros-noetic.list.
sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
sudo apt update
sudo apt-get install -y python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential cmake
sudo rosdep init
cat /etc/ros/rosdep/sources.list.d/20-default.list
rosdep update

mkdir ~/ros_catkin_ws
cd ~/ros_catkin_ws

rosinstall_generator ros_comm --rosdistro noetic --deps --wet-only --tar > noetic-ros_comm-wet.rosinstall
wstool init src noetic-ros_comm-wet.rosinstall
rosdep install -y --from-paths src --ignore-src --rosdistro noetic -r --os=debian:buster

sudo dphys-swapfile swapoff
sudoedit /etc/dphys-swapfile
sudo dphys-swapfile setup
sudo dphys-swapfile swapon
sudo src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/noetic -j1 -DPYTHON_EXECUTABLE=/usr/bin/python3

source /opt/ros/noetic/setup.bash
roscore
#########################################################################################################################################################

https://docs.px4.io/master/en/dev_setup/dev_env_linux_ubuntu.html

#Download PX4 Sorce Code
git clone https://github.com/PX4/PX4-Autopilot.git --recursive
bash ./PX4-Autopilot/Tools/setup/ubuntu.sh

#Raspberry Pi
wget https://raw.githubusercontent.com/PX4/PX4-Autopilot/master/Tools/setup/ubuntu.sh
wget https://raw.githubusercontent.com/PX4/PX4-Autopilot/master/Tools/setup/requirements.txt

bash ubuntu.sh --no-nuttx --no-sim-tools

#GCC (armhf)
sudo apt-get install -y gcc-8-arm-linux-gnueabihf g++-8-arm-linux-gnueabihf

sudo update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-8 100 --slave /usr/bin/arm-linux-gnueabihf-g++ arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-8
sudo update-alternatives --config arm-linux-gnueabihf-gcc

#GCC (aarch64)
sudo apt-get install -y gcc-8-aarch64-linux-gnu g++-8-aarch64-linux-gnu
sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-8 100 --slave /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-8
sudo update-alternatives --config aarch64-linux-gnu-gcc

#Clang (optional)
cd <PATH-TO-PX4-SRC>
mkdir build/px4_raspberrypi_default_clang
cd build/px4_raspberrypi_default_clang
cmake \
-G"Unix Makefiles" \
-DCONFIG=px4_raspberrypi_default \
-UCMAKE_C_COMPILER \
-DCMAKE_C_COMPILER=clang \
-UCMAKE_CXX_COMPILER \
-DCMAKE_CXX_COMPILER=clang++ \
../..
make

#ROS/Gazebo
wget https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_ros_melodic.sh

bash ubuntu_sim_ros_melodic.sh

##############################################################################################################################
